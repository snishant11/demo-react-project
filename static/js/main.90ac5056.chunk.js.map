{"version":3,"sources":["Event.js","App.js","reportWebVitals.js","index.js"],"names":["Event","type","datetime_utc","id","title","popularity","url","className","href","clientID","process","App","useState","loading","setLoading","events","setEvents","page","setPage","pageurl","fetchEvent","a","fetch","response","json","data","oldEvents","console","log","useEffect","scrollEvent","window","addEventListener","innerHeight","scrollY","document","body","scrollHeight","oldPage","removeEventListener","map","event","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"+OAaeA,EAZD,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,KAAUC,GAA2C,EAA/CC,GAA+C,EAA3CD,cAAcE,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,IAC1D,OACE,0BAASC,UAAU,QAAnB,UACE,6BAAKH,IACL,wCAAWH,KACX,6CAAgBI,EAAhB,OACA,6BAAKH,IACL,mBAAGM,KAAMF,EAAT,8BCLAG,EAAQ,qBAAiBC,uCA2DhBC,MAxDf,WACE,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAwBJ,mBAAS,GAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAEMC,EAAO,gBAAYF,GACnBX,EAAG,UARE,qCAQF,OAAgBG,GAAhB,OAA2BU,EAA3B,gBACHC,EAAU,uCAAG,gCAAAC,EAAA,6DACjBP,GAAW,GADM,kBAGQQ,MAAMhB,GAHd,cAGTiB,EAHS,gBAIIA,EAASC,OAJb,OAITC,EAJS,OAKPV,EAAWU,EAAXV,OAERC,GAAU,SAACU,GACT,MAAM,GAAN,mBAAWA,GAAX,YAAyBX,OAE3BD,GAAW,GAVI,kDAYfa,QAAQC,IAAR,MAZe,0DAAH,qDAkChB,OAlBAC,qBAAU,WACRT,MACC,CAACH,IAEJY,qBAAU,WACR,IAAMC,EAAcC,OAAOC,iBAAiB,UAAU,YAEjDnB,GACDkB,OAAOE,YAAcF,OAAOG,SAAWC,SAASC,KAAKC,aAAe,IAEpEnB,GAAQ,SAACoB,GACP,OAAOA,EAAU,QAIvB,OAAOP,OAAOQ,oBAAoB,SAAUT,KAC3C,IAGD,iCACE,oBAAIvB,UAAU,QAAd,oBACA,0BAASA,UAAU,SAAnB,UACE,qBAAKA,UAAU,gBAAf,SACGQ,EAAOyB,KAAI,SAACC,EAAOC,GAClB,OAAO,cAAC,EAAD,eAAuBD,GAAXC,QAGtB7B,GAAW,oBAAIN,UAAU,UAAd,+BC5CLoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnB,SAASoB,eAAe,SAM1BZ,M","file":"static/js/main.90ac5056.chunk.js","sourcesContent":["//type, id, datetime_utc, title, popularity, url\r\nconst Event = ({ type, id, datetime_utc, title, popularity, url }) => {\r\n  return (\r\n    <article className=\"event\">\r\n      <h3>{title}</h3>\r\n      <h4>Type: {type}</h4>\r\n      <h5>popularity:{popularity}*</h5>\r\n      <h5>{datetime_utc}</h5>\r\n      <a href={url}>Link to show</a>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default Event;\r\n","import React, { useState, useEffect } from \"react\";\nimport Event from \"./Event\";\n\nconst clientID = `?client_id=${process.env.REACT_APP_KEY}`;\nconst mainURL = `https://api.seatgeek.com/2/events`;\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [events, setEvents] = useState([]);\n  const [page, setPage] = useState(1);\n\n  const pageurl = `&page=${page}`;\n  const url = `${mainURL}${clientID}${pageurl}&per_page=20`;\n  const fetchEvent = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      const { events } = data;\n\n      setEvents((oldEvents) => {\n        return [...oldEvents, ...events];\n      });\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchEvent();\n  }, [page]);\n\n  useEffect(() => {\n    const scrollEvent = window.addEventListener(\"scroll\", () => {\n      if (\n        !loading &&\n        window.innerHeight + window.scrollY >= document.body.scrollHeight - 10\n      ) {\n        setPage((oldPage) => {\n          return oldPage + 1;\n        });\n      }\n    });\n    return window.removeEventListener(\"scroll\", scrollEvent);\n  }, []);\n\n  return (\n    <main>\n      <h2 className=\"title\">Events</h2>\n      <section className=\"events\">\n        <div className=\"events-center\">\n          {events.map((event, index) => {\n            return <Event key={index} {...event} />;\n          })}\n        </div>\n        {loading && <h4 className=\"loading\">loading...</h4>}\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}